create or replace function stage_pershing.fn_parse_gcus_reg_a(_id_proceso bigint) returns SETOF stage_pershing.stage_gcus_reg_a
    language plpgsql
as
$$
    BEGIN

    RETURN QUERY
    SELECT
        id, id_proceso, process_date::VARCHAR(100),
        transaction_code::VARCHAR(100),
        record_indicator_value::VARCHAR(100),
        record_id_sequence_number::int,
        account_number::VARCHAR(100),
        cusip_number::VARCHAR(100),
        portfolio_currency::VARCHAR(100),
        campo_7::VARCHAR(100),
        underlying_cusip_number::VARCHAR(100),
        country_code::VARCHAR(100),
        campo_10::VARCHAR(100),
        ip_record_number::VARCHAR(100),
        ibd_number::VARCHAR(100),
        currency_security_indicator::VARCHAR(100),
        issue_currency::VARCHAR(100),
        public.fn_fecha_string_to_date(datestamp_trade_date, 'CCYYMMDD') as datestamp_trade_date,
        public.fn_fecha_string_to_date(datestamp_settlement_date, 'CCYYMMDD') as datestamp_settlement_date,
        public.fn_convierte_texto_numerico_cobol(trade_date_quantity, 5)::NUMERIC(45,20) as trade_date_quantity,
        trade_date_quantity_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(settlement_date_quantity, 5)::NUMERIC(45,20) as settlement_date_quantity,
        settlement_date_quantity_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(seg_quantity, 5)::NUMERIC(45,20) as seg_quantity,
        seg_quantity_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(safekeeping_quantity, 5)::NUMERIC(45,20) as safekeeping_quantity,
        safekeeping_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(transfer_quantity, 5)::NUMERIC(45,20) as transfer_quantity,
        transfer_quantity_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(pending_transfer_quantity, 5)::NUMERIC(45,20) as pending_transfer_quantity,
        pending_transfer_quantity_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(legal_transfer_quantity, 5)::NUMERIC(45,20) as legal_transfer_quantity,
        legal_transfer_quantity_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(tendered_quantity, 5)::NUMERIC(45,20) as tendered_quantity,
        tendered_quantity_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(pending_papers, 5)::NUMERIC(45,20) as pending_papers,
        pending_papers_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(short_against_the_box_quantity, 5)::NUMERIC(45,20) as short_against_the_box_quantity,
        short_against_the_box_quantity_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(networked_quantity, 5)::NUMERIC(45,20) as networked_quantity,
        networked_quantity_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(pending_split_quantity, 5)::NUMERIC(45,20) as pending_split_quantity,
        pending_split_quantity_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(quantity_covering_options, 5)::NUMERIC(45,20) as quantity_covering_options,
        quantity_covering_options_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(trade_date_quantity_bought, 5)::NUMERIC(45,20) as trade_date_quantity_bought,
        trade_date_quantity_bought_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(trade_date_quantity_sold, 5)::NUMERIC(45,20) as trade_date_quantity_sold,
        trade_date_quantity_sold_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(fed_rquirement, 2)::NUMERIC(45,20) as fed_rquirement,
        fed_rquirement_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(house_margin_requirement, 2)::NUMERIC(45,20) as house_margin_requirement,
        house_margin_requirement_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(nyse_requirement, 2)::NUMERIC(45,20) as nyse_requirement,
        nyse_requirement_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(equity_requirment, 2)::NUMERIC(45,20) as equity_requirment,
        equity_requirment_sign::VARCHAR(100),
        security_symbol::VARCHAR(100),
        security_type::VARCHAR(100),
        security_mod::VARCHAR(100),
        security_calc::VARCHAR(100),
        minor_product_code::VARCHAR(100),
        network_eligibility_indicator::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(strike_price, 9)::NUMERIC(45,20) as strike_price,
        strike_price_sign::VARCHAR(100),
        public.fn_fecha_string_to_date(expiration_maturity_date, 'CCYYMMDD') as expiration_maturity_date,
        public.fn_convierte_texto_numerico_cobol(contract_size, 5)::NUMERIC(45,20) as contract_size,
        public.fn_convierte_texto_numerico_cobol(conversion_ratio, 9)::NUMERIC(45,20) as conversion_ratio,
        account_short_name::VARCHAR(100),
        state_code::VARCHAR(100),
        country_code_account::VARCHAR(100),
        campo_69::VARCHAR(100),
        number_security_description_lines::int,
        security_description_line_1::VARCHAR(100),
        security_description_line_2::VARCHAR(100),
        security_description_line_3::VARCHAR(100),
        security_description_line_4::VARCHAR(100),
        security_description_line_5::VARCHAR(100),
        security_description_line_6::VARCHAR(100),
        dividend_option::VARCHAR(100),
        long_term_capital_gains_option::VARCHAR(100),
        short_term_capital_gains_option::VARCHAR(100),
        firm_trading_indicator::VARCHAR(100),
        position_currency_security::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(trade_date_liquidating_value, 3)::NUMERIC(45,20) as trade_date_liquidating_value,
        trade_date_liquidating_value_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(pool_factor, 8)::NUMERIC(45,20) as pool_factor,
        pool_factor_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(exchange_rate, 10)::NUMERIC(45,20) as exchange_rate,
        exchange_rate_sign::VARCHAR(100),
        public.fn_convierte_texto_numerico_cobol(settlement_date_liquidating_value, 3)::NUMERIC(45,20) as settlement_date_liquidating_value,
        settlement_date_liquidating_value_sign::VARCHAR(100),
        campo_90::VARCHAR(100),
        alternate_security_id_type::VARCHAR(100),
        alternate_security_id::VARCHAR(100),
        campo_93::VARCHAR(100),
        eor::VARCHAR(100)

    FROM stage_pershing.fn_extrae_gcus_reg_a(_id_proceso)
    ORDER BY id;

    RETURN;
    END;
$$;

alter function stage_pershing.fn_parse_gcus_reg_a(bigint) owner to postgres;


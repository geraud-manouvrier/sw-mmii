create or replace function stage_pershing.fn_parse_acct_reg_w(_id_proceso bigint) returns SETOF stage_pershing.stage_acct_reg_w
    language plpgsql
as
$$
    BEGIN

    RETURN QUERY
    SELECT
        fn_reg.id::BIGINT, fn_reg.id_proceso::BIGINT, fn_reg.process_date::VARCHAR(100),
        fn_reg.transaction_code::VARCHAR(100),
        fn_reg.record_indicator_value::VARCHAR(100),
        fn_reg.record_id_sequence_number::int as record_id_sequence_number,
        fn_reg.account_number::VARCHAR(100),
        fn_reg.ibd_number::VARCHAR(100),
        fn_reg.campo_6::VARCHAR(100),
        fn_reg.ip_number::VARCHAR(100),
        fn_reg.account_short_name::VARCHAR(100),
        fn_reg.campo_9::VARCHAR(100),
        fn_reg.record_transaction_code::VARCHAR(100),
        fn_reg.non_us_dollar_trading::VARCHAR(100),
        fn_reg.base_currency::VARCHAR(100),
        fn_reg.income_currency::VARCHAR(100),
        fn_reg.statement_language::VARCHAR(100),
        fn_reg.statement_format_code::VARCHAR(100),
        fn_reg.msrb_statement_ind::VARCHAR(100),
        fn_reg.campo_17::VARCHAR(100),
        fn_reg.pep::VARCHAR(100),
        fn_reg.first_name_pep::VARCHAR(100),
        fn_reg.last_name_pep::VARCHAR(100),
        fn_reg.suffix_pep::VARCHAR(100),
        fn_reg.political_office_held::VARCHAR(100),
        fn_reg.country_of_office::VARCHAR(100),
        fn_reg.foreign_bank_account_ind::VARCHAR(100),
        public.fn_fecha_string_to_date(fn_reg.foreign_bank_cert_date, 'CCYYMMDD')::DATE as foreign_bank_cert_date,
        public.fn_fecha_string_to_date(fn_reg.foreign_bank_cert_exp_date, 'CCYYMMDD')::DATE as foreign_bank_cert_exp_date,
        fn_reg.central_bank_ind::VARCHAR(100),
        fn_reg.acct_foreign_financial_inst::VARCHAR(100),
        fn_reg.foreign_bank_acct_oper_1::VARCHAR(100),
        fn_reg.foreign_bank_acct_oper_2::VARCHAR(100),
        fn_reg.foreign_bank_acct_oper_3::VARCHAR(100),
        fn_reg.number_people_own::VARCHAR(100),
        fn_reg.proprietary_acct_owned::VARCHAR(100),
        fn_reg.campo_34::VARCHAR(100),
        fn_reg.tel_1_transaction_code::VARCHAR(100),
        fn_reg.tel_1_us_ind::VARCHAR(100),
        fn_reg.tel_1_type_id::VARCHAR(100),
        fn_reg.tel_1_number::VARCHAR(100),
        fn_reg.tel_1_extension::VARCHAR(100),
        fn_reg.tel_2_transaction_code::VARCHAR(100),
        fn_reg.tel_2_us_ind::VARCHAR(100),
        fn_reg.tel_2_type_id::VARCHAR(100),
        fn_reg.tel_2_number::VARCHAR(100),
        fn_reg.tel_2_extension::VARCHAR(100),
        fn_reg.tel_3_transaction_code::VARCHAR(100),
        fn_reg.tel_3_us_ind::VARCHAR(100),
        fn_reg.tel_3_type_id::VARCHAR(100),
        fn_reg.tel_3_number::VARCHAR(100),
        fn_reg.tel_3_extension::VARCHAR(100),
        fn_reg.tel_4_transaction_code::VARCHAR(100),
        fn_reg.tel_4_us_ind::VARCHAR(100),
        fn_reg.tel_4_type_id::VARCHAR(100),
        fn_reg.tel_4_number::VARCHAR(100),
        fn_reg.tel_4_extension::VARCHAR(100),
        fn_reg.tel_5_transaction_code::VARCHAR(100),
        fn_reg.tel_5_us_ind::VARCHAR(100),
        fn_reg.tel_5_type_id::VARCHAR(100),
        fn_reg.tel_5_number::VARCHAR(100),
        fn_reg.tel_5_extension::VARCHAR(100),
        fn_reg.tel_6_transaction_code::VARCHAR(100),
        fn_reg.tel_6_us_ind::VARCHAR(100),
        fn_reg.tel_6_type_id::VARCHAR(100),
        fn_reg.tel_6_number::VARCHAR(100),
        fn_reg.tel_6_extension::VARCHAR(100),
        fn_reg.tel_7_transaction_code::VARCHAR(100),
        fn_reg.tel_7_us_ind::VARCHAR(100),
        fn_reg.tel_7_type_id::VARCHAR(100),
        fn_reg.tel_7_number::VARCHAR(100),
        fn_reg.tel_7_extension::VARCHAR(100),
        fn_reg.tel_8_transaction_code::VARCHAR(100),
        fn_reg.tel_8_us_ind::VARCHAR(100),
        fn_reg.tel_8_type_id::VARCHAR(100),
        fn_reg.tel_8_number::VARCHAR(100),
        fn_reg.tel_8_extension::VARCHAR(100),
        fn_reg.email_address::VARCHAR(100),
        fn_reg.external_position_ind::VARCHAR(100),
        fn_reg.purge_eligible_ind::VARCHAR(100),
        fn_reg.advisory_acct_ind::VARCHAR(100),
        fn_reg.product_profile_code::VARCHAR(100),
        CASE WHEN trim(fn_reg.cents_per_share_discount)='' THEN NULL ELSE fn_reg.cents_per_share_discount END::int as cents_per_share_discount,
        fn_reg.campo_81::VARCHAR(100),
        public.fn_fecha_string_to_date(fn_reg.option_disclosure_date, 'CCYYMMDD')::DATE as option_disclosure_date,
        fn_reg.campo_83::VARCHAR(100),
        fn_reg.country_acct_level_tax_residency::VARCHAR(100),
        fn_reg.eor::VARCHAR(100)

    FROM stage_pershing.fn_extrae_acct_reg_w(_id_proceso) fn_reg
    ORDER BY fn_reg.id;

    RETURN;
    END;
$$;

alter function stage_pershing.fn_parse_acct_reg_w(bigint) owner to postgres;

